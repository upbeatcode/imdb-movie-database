import {
  BrowserRouter as Router,
  Routes,
  Route,
  useParams,
  useNavigate
} from 'react-router-dom';
import { data } from './assets/data.js';
import MovieTable from './MovieTable';
import Header from './Header.jsx';
import DataVisualization from './DataVisualization';
import { 
  GenreTabsProps, 
  DecadeTabsProps, 
  YearTabsProps, 
  RatingTabsProps, 
  DateRatedTabsProps, 
  HomePageProps, 
  GenrePageProps, 
  DecadePageProps, 
  YearPageProps, 
  RatingPageProps, 
  DateRatedPageProps 
} from './componentProps';
import { useState } from 'react';
import PropTypes from 'prop-types';

// Helper function to generate a descriptive header based on active filters
const generateFilterHeader = (activeFilters, movieCount) => {
  const { genre, decade, year, rating, dateRatedYear } = activeFilters;
  
  // Start building filter description parts
  const filterParts = [];
  
  // Add rating part if present
  if (rating !== null) {
    filterParts.push(`rated ${rating}â˜…`);
  }
  
  // Add genre part if present
  if (genre !== null) {
    filterParts.push(`in "${genre}"`);
  }
  
  // Add decade part if present
  if (decade !== null) {
    filterParts.push(`from the ${decade}`);
  }
  
  // Add specific year part if present
  if (year !== null) {
    filterParts.push(`from ${year}`);
  }
  
  // Add date rated year part if present
  if (dateRatedYear !== null) {
    filterParts.push(`watched in ${dateRatedYear}`);
  }
  
  // Combine all parts into a complete description
  if (filterParts.length === 0) {
    return `All Movies (${movieCount})`;
  }
  
  // Join with proper separators for readability
  let description = "";
  
  if (filterParts.length === 1) {
    description = `Movies ${filterParts[0]}`;
  } else if (filterParts.length === 2) {
    description = `Movies ${filterParts[0]} and ${filterParts[1]}`;
  } else {
    // For 3+ filters, use semicolons for better visual separation
    const lastPart = filterParts.pop();
    description = `Movies ${filterParts.join("; ")}; and ${lastPart}`;
  }
  
  return `${description} (${movieCount})`;
};

// Function to get unique genres from the movie data
const getUniqueGenres = (movies) => {
  const genres = new Set();
  movies.forEach((movie) => movie.genres.forEach((genre) => genres.add(genre)));
  return Array.from(genres);
};

// Function to get unique decades from the movie data
const getUniqueDecades = (movies) => {
  const decades = new Set();
  movies.forEach((movie) => {
    const decade = Math.floor(movie.year / 10) * 10; // Calculate the decade (e.g., 1987 -> 1980s)
    decades.add(`${decade}s`); // Add the decade to the set (e.g., "1980s")
  });
  return Array.from(decades).sort(); // Sort the decades in ascending order
};

// Function to get unique years from the movie data
const getUniqueYears = (movies) => {
  const years = new Set();
  movies.forEach((movie) => years.add(movie.year)); // Add the year to the set
  return Array.from(years).sort((a, b) => b - a); // Sort years in descending order (newest first)
};

// Function to get unique "My Rating" values from the movie data
const getUniqueRatings = (movies) => {
  const ratings = new Set();
  movies.forEach((movie) => ratings.add(movie.myRating)); // Add the rating to the set
  return Array.from(ratings).sort((a, b) => b - a); // Sort ratings in descending order (highest first)
};

// Function to get unique years from the "Date Rated" field
const getUniqueDateRatedYears = (movies) => {
  const years = new Set();
  movies.forEach((movie) => {
    // Use dataRated consistently (matches the data source)
    if (movie.dataRated) {
      try {
        const year = new Date(movie.dataRated).getFullYear(); // Extract the year from the date
        if (!isNaN(year)) { // Check if the year is a valid number
          years.add(year);
        }
      } catch (error) {
        console.error("Invalid date format:", movie.dataRated);
      }
    }
  });
  return Array.from(years).sort((a, b) => b - a); // Sort years in descending order (newest first)
};

function GenreTabs({ currentGenre, onSelect }) {
  const genres = getUniqueGenres(data);

  return (
    <div className="tabs">
      <button
        className={!currentGenre ? 'active' : ''}
        onClick={() => onSelect(null)} // Clear genre filter
      >
        All Genres
      </button>
      {genres.map((genre) => (
        <button
          key={genre}
          className={currentGenre === genre ? 'active' : ''}
          onClick={() => onSelect(genre)} // Select genre filter
        >
          {genre}
        </button>
      ))}
    </div>
  );
}

GenreTabs.propTypes = GenreTabsProps;

function DecadeTabs({ currentDecade, onSelect }) {
  const decades = getUniqueDecades(data);

  return (
    <div className="tabs">
      <button
        className={!currentDecade ? 'active' : ''}
        onClick={() => onSelect(null)} // Clear decade filter
      >
        All Decades
      </button>
      {decades.map((decade) => (
        <button
          key={decade}
          className={currentDecade === decade ? 'active' : ''}
          onClick={() => onSelect(decade)} // Select decade filter
        >
          {decade}
        </button>
      ))}
    </div>
  );
}

DecadeTabs.propTypes = DecadeTabsProps;

function YearTabs({ currentYear, onSelect }) {
  const years = getUniqueYears(data);

  return (
    <div className="tabs">
      <button
        className={!currentYear ? 'active' : ''}
        onClick={() => onSelect(null)} // Clear year filter
      >
        All Years
      </button>
      {years.map((year) => (
        <button
          key={year}
          className={currentYear === year ? 'active' : ''} // Fix: Compare with number instead of string
          onClick={() => onSelect(year)} // Select year filter
        >
          {year}
        </button>
      ))}
    </div>
  );
}

YearTabs.propTypes = YearTabsProps;

function RatingTabs({ currentRating, onSelect }) {
  const ratings = getUniqueRatings(data);

  return (
    <div className="tabs">
      <button
        className={!currentRating ? 'active' : ''}
        onClick={() => onSelect(null)} // Clear rating filter
      >
        All Ratings
      </button>
      {ratings.map((rating) => (
        <button
          key={rating}
          className={currentRating === rating ? 'active' : ''} // Fix: Compare with number instead of string
          onClick={() => onSelect(rating)} // Select rating filter
        >
          {rating}
        </button>
      ))}
    </div>
  );
}

RatingTabs.propTypes = RatingTabsProps;

function DateRatedTabs({ currentDateRatedYear, onSelect }) {
  const dateRatedYears = getUniqueDateRatedYears(data);

  return (
    <div className="tabs">
      <button
        className={!currentDateRatedYear ? 'active' : ''}
        onClick={() => onSelect(null)} // Clear date rated filter
      >
        All Years
      </button>
      {dateRatedYears.map((year) => (
        <button
          key={year}
          className={currentDateRatedYear === year ? 'active' : ''} // Fix: Compare with number instead of string
          onClick={() => onSelect(year)} // Select date rated filter
        >
          {year}
        </button>
      ))}
    </div>
  );
}

DateRatedTabs.propTypes = DateRatedTabsProps;

function GenrePage() {
  const { genre } = useParams();
  const filteredMovies = data.filter((movie) => movie.genres.includes(genre));

  return (
    <div>
      <h1>
        {genre} Movies ({filteredMovies.length})
      </h1>
      <MovieTable data={filteredMovies} />
    </div>
  );
}

GenrePage.propTypes = GenrePageProps;

function DecadePage() {
  const { decade } = useParams();
  const filteredMovies = data.filter((movie) => {
    const movieDecade = Math.floor(movie.year / 10) * 10;
    return `${movieDecade}s` === decade;
  });

  return (
    <div>
      <h1>
        {decade} Movies ({filteredMovies.length})
      </h1>
      <MovieTable data={filteredMovies} />
    </div>
  );
}

DecadePage.propTypes = DecadePageProps;

function YearPage() {
  const { year } = useParams();
  const yearNum = parseInt(year);
  const filteredMovies = data.filter((movie) => movie.year === yearNum);

  return (
    <div>
      <h1>
        {year} Movies ({filteredMovies.length})
      </h1>
      <MovieTable data={filteredMovies} />
    </div>
  );
}

YearPage.propTypes = YearPageProps;

function RatingPage() {
  const { rating } = useParams();
  const ratingNum = parseFloat(rating);
  const filteredMovies = data.filter(
    (movie) => movie.myRating === ratingNum
  );

  return (
    <div>
      <h1>
        Movies Rated {rating} ({filteredMovies.length})
      </h1>
      <MovieTable data={filteredMovies} />
    </div>
  );
}

RatingPage.propTypes = RatingPageProps;

function DateRatedPage() {
  const { year } = useParams();
  const yearNum = parseInt(year);
  const filteredMovies = data.filter((movie) => {
    // Use dataRated consistently
    if (movie.dataRated) {
      try {
        const ratedYear = new Date(movie.dataRated).getFullYear();
        return !isNaN(ratedYear) && ratedYear === yearNum;
      } catch (error) {
        return false;
      }
    }
    return false;
  });

  return (
    <div>
      <h1>
        Movies Rated in {year} ({filteredMovies.length})
      </h1>
      <MovieTable data={filteredMovies} />
    </div>
  );
}

DateRatedPage.propTypes = DateRatedPageProps;

function HomePage({
  activeFilter,
  setActiveFilter,
  filterMode,
  setFilterMode,
  activeFilters,
  updateActiveFilters,
  filterMovies,
  clearFilters
}) {
  const navigate = useNavigate();
  const [showVisualization, setShowVisualization] = useState(false);

  // Handle filter selection
  const handleFilterSelect = (filterType, value) => {
    if (filterMode === 'cumulative') {
      updateActiveFilters(filterType, value);
    } else {
      // Normal filter mode: navigate to the selected filter
      let path;
      switch (filterType) {
        case 'genre':
          path = value ? `/genre/${value}` : '/';
          break;
        case 'decade':
          path = value ? `/decade/${value}` : '/';
          break;
        case 'year':
          path = value ? `/year/${value}` : '/';
          break;
        case 'rating':
          path = value ? `/rating/${value}` : '/';
          break;
        case 'dateRatedYear':
          path = value ? `/date-rated/${value}` : '/';
          break;
        default:
          path = '/';
      }
      navigate(path);
    }
  };

  // Get filtered movies
  const filteredMovies =
    filterMode === 'cumulative' ? filterMovies(data) : data;

  return (
    <div>
      {/* Filter Mode Buttons */}
      <div className="filter-mode-buttons">
        <button
          className={`filter-toggle ${filterMode === 'normal' ? 'active' : ''}`}
          onClick={() => setFilterMode('normal')}
        >
          Normal Filter
        </button>
        <button
          className={`filter-toggle ${
            filterMode === 'cumulative' ? 'active' : ''
          }`}
          onClick={() => setFilterMode('cumulative')}
        >
          Cumulative Filter
        </button>
        {filterMode === 'cumulative' && (
          <button onClick={clearFilters} className="clear-filters">
            Clear Filters
          </button>
        )}
      </div>

      {/* Visualization Toggle Button */}
      <div className="visualization-toggle">
        <button 
          className={`filter-toggle ${showVisualization ? 'active' : ''}`}
          onClick={() => setShowVisualization(!showVisualization)}
        >
          {showVisualization ? 'Hide Visualization' : 'Show Visualization'}
        </button>
      </div>

      {/* Data Visualization Section */}
      {showVisualization && <DataVisualization data={filteredMovies} />}

      {/* Filter Toggles */}
      <div className="filter-tabs">
        <button
          className={`filter-toggle ${
            activeFilter === 'genres' ? 'active' : ''
          }`}
          onClick={() => setActiveFilter('genres')}
        >
          Genres
        </button>
        <button
          className={`filter-toggle ${
            activeFilter === 'decades' ? 'active' : ''
          }`}
          onClick={() => setActiveFilter('decades')}
        >
          Decades
        </button>
        <button
          className={`filter-toggle ${
            activeFilter === 'years' ? 'active' : ''
          }`}
          onClick={() => setActiveFilter('years')}
        >
          Years
        </button>
        <button
          className={`filter-toggle ${
            activeFilter === 'ratings' ? 'active' : ''
          }`}
          onClick={() => setActiveFilter('ratings')}
        >
          Ratings
        </button>
        <button
          className={`filter-toggle ${
            activeFilter === 'dateRated' ? 'active' : ''
          }`}
          onClick={() => setActiveFilter('dateRated')}
        >
          Date Rated
        </button>
      </div>

      {/* Filter Header */}
      <h1 className="filter-header">
        {filterMode === 'cumulative'
          ? generateFilterHeader(activeFilters, filteredMovies.length)
          : 'All Movies'}
      </h1>

      {/* Active Filter Tabs */}
      {activeFilter === 'genres' && (
        <GenreTabs
          currentGenre={activeFilters.genre}
          onSelect={(genre) => handleFilterSelect('genre', genre)}
        />
      )}

      {activeFilter === 'decades' && (
        <DecadeTabs
          currentDecade={activeFilters.decade}
          onSelect={(decade) => handleFilterSelect('decade', decade)}
        />
      )}

      {activeFilter === 'years' && (
        <YearTabs
          currentYear={activeFilters.year}
          onSelect={(year) => handleFilterSelect('year', year)}
        />
      )}

      {activeFilter === 'ratings' && (
        <RatingTabs
          currentRating={activeFilters.rating}
          onSelect={(rating) => handleFilterSelect('rating', rating)}
        />
      )}

      {activeFilter === 'dateRated' && (
        <DateRatedTabs
          currentDateRatedYear={activeFilters.dateRatedYear}
          onSelect={(year) => handleFilterSelect('dateRatedYear', year)}
        />
      )}

      {/* Movie Table */}
      <MovieTable data={filteredMovies} />
    </div>
  );
}

HomePage.propTypes = HomePageProps;

function App() {
  // State for active filter tab
  const [activeFilter, setActiveFilter] = useState('genres');

  // State for filter mode (normal or cumulative)
  const [filterMode, setFilterMode] = useState('normal');

  // State for active filters
  const [activeFilters, setActiveFilters] = useState({
    genre: null,
    decade: null,
    year: null,
    rating: null,
    dateRatedYear: null
  });

  // Function to update active filters
  const updateActiveFilters = (filterType, value) => {
    // Process the value based on filter type
    let processedValue = value;
    if (filterType === 'year' || filterType === 'dateRatedYear') {
      processedValue = value !== null ? parseInt(value) : null;
    } else if (filterType === 'rating') {
      processedValue = value !== null ? parseFloat(value) : null;
    }

    // Update the active filters
    setActiveFilters((prevFilters) => ({
      ...prevFilters,
      [filterType]: processedValue
    }));
  };

  // Function to clear all filters
  const clearFilters = () => {
    setActiveFilters({
      genre: null,
      decade: null,
      year: null,
      rating: null,
      dateRatedYear: null
    });
  };

  // Function to filter movies based on active filters
  const filterMovies = (movies) => {
    return movies.filter((movie) => {
      // Fix: Proper type comparison and error handling for dates
      const matchesGenre =
        !activeFilters.genre || movie.genres.includes(activeFilters.genre);
      
      const matchesDecade =
        !activeFilters.decade ||
        `${Math.floor(movie.year / 10) * 10}s` === activeFilters.decade;
      
      const matchesYear =
        !activeFilters.year || movie.year === activeFilters.year;
      
      const matchesRating =
        !activeFilters.rating || movie.myRating === activeFilters.rating;
      
      let matchesDateRatedYear = true;
      if (activeFilters.dateRatedYear !== null) {
        // Use dataRated consistently
        matchesDateRatedYear = false;
        if (movie.dataRated) {
          try {
            const ratedYear = new Date(movie.dataRated).getFullYear();
            matchesDateRatedYear = !isNaN(ratedYear) && ratedYear === activeFilters.dateRatedYear;
          } catch (error) {
            matchesDateRatedYear = false;
          }
        }
      }

      return (
        matchesGenre &&
        matchesDecade &&
        matchesYear &&
        matchesRating &&
        matchesDateRatedYear
      );
    });
  };

  return (
    <Router>
      <Header />
      <Routes>
        <Route
          path="/"
          element={
            <HomePage
              activeFilter={activeFilter}
              setActiveFilter={setActiveFilter}
              filterMode={filterMode}
              setFilterMode={setFilterMode}
              activeFilters={activeFilters}
              updateActiveFilters={updateActiveFilters}
              filterMovies={filterMovies}
              clearFilters={clearFilters}
            />
          }
        />
        {/* Fix: Corrected Route syntax for React Router v6 */}
        <Route path="/genre/:genre" element={<GenrePage />} />
        <Route path="/decade/:decade" element={<DecadePage />} />
        <Route path="/year/:year" element={<YearPage />} />
        <Route path="/rating/:rating" element={<RatingPage />} />
        <Route path="/date-rated/:year" element={<DateRatedPage />} />
      </Routes>
    </Router>
  );
}

export default App;